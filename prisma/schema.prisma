generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [hstore]
}

model User {
  id        String  @id @default(uuid()) @db.Uuid
  name      String  @db.VarChar(100)
  email     String  @unique @db.VarChar(50)
  username  String  @unique @db.VarChar(30)
  password  String
  authToken String? @map("auth_token") //token de autenticação

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  tweets   Tweet[]
  likes    Like[]
  retweets Retweet[]

  followers Follower[] @relation("followers") //Usuários que seguem este usuário
  following Follower[] @relation("following") // Usuários que este usuário segue

  @@map("users")
}

model Follower {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid // Usuário que está seguindo
  user   User   @relation("followers", fields: [userId], references: [id]) //relação

  followedId String @map("followed_id") @db.Uuid // Usuário que está sendo seguido
  following  User   @relation("following", fields: [followedId], references: [id]) //relação

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("followers")
}

model Tweet {
  id       String    @id @default(uuid()) @db.Uuid
  userId   String    @map("user_id") @db.Uuid
  user     User      @relation(fields: [userId], references: [id])
  type     TweetType @default(TWEET)
  parentId String?   @map("parent_id") @db.Uuid
  parent   Tweet?    @relation("TweetReplies", fields: [parentId], references: [id]) //diferenciar pela relação
  content  String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  replies  Tweet[]   @relation("TweetReplies") //relação
  likes    Like[]
  retweets Retweet[]

  @@map("tweets")
}

model Like {
  id      String @id @default(uuid()) @db.Uuid
  tweetId String @map("tweet_id") @db.Uuid
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  userId  String @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("likes")
}

model Retweet {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id])
  tweetId String @map("tweet_id") @db.Uuid
  tweet   Tweet  @relation(fields: [tweetId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("retweets")
}

enum TweetType {
  TWEET
  REPLY
}
