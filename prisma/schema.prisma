generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [hstore]
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  name     String @db.VarChar(100)
  email    String @unique @db.VarChar(50)
  username String @unique @db.VarChar(30)
  password String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  tweets   Tweet[] //Tweets e replies criados
  likes    Like[] //Likes dados
  retweets Retweet[] //Retweets feitos

  followers Follower[] @relation("followed_by") // Usuários que seguem este usuário
  following Follower[] @relation("follows") // Usuários que este usuário segue

  @@map("users")
}

model Follower {
  id         String @id @default(uuid()) @db.Uuid // id do relacionamento
  followerId String @map("follower_id") @db.Uuid // id do seguidor
  follower   User   @relation("follows", fields: [followerId], references: [id], onDelete: Cascade)

  followedId String @map("followed_id") @db.Uuid // id do usuário seguido
  followed   User   @relation("followed_by", fields: [followedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@unique([followerId, followedId]) // Garante que um usuário não possa seguir o mesmo usuário mais de uma vez
  @@map("followers")
}

model Tweet {
  id        String    @id @default(uuid()) @db.Uuid //id do tweet
  userId    String    @map("user_id") @db.Uuid //id do usuário que criou o tweet
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweetType TweetType @default(TWEET) @map("type") //tipo (tweet ou reply)
  parentId  String?   @map("parent_id") @db.Uuid //tweet pai, em caso de reply
  parent    Tweet?    @relation("tweet_replies", fields: [parentId], references: [id], onDelete: Cascade) //diferenciar pela relação
  content   String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  replies  Tweet[]   @relation("tweet_replies") //respostas que o tweet tem
  likes    Like[] //likes que o tweet tem
  retweets Retweet[] //retweets deste tweet

  @@map("tweets")
}

model Like {
  id      String @id @default(uuid()) @db.Uuid //id do like
  tweetId String @map("tweet_id") @db.Uuid //id do tweet curtido
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId  String @map("user_id") @db.Uuid //id do usuário que curtiu
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@unique([tweetId, userId]) // não permitir duplicidade de likes
  @@map("likes")
}

model Retweet {
  id      String  @id @default(uuid()) @db.Uuid //id do retweet
  userId  String  @map("user_id") @db.Uuid //id do usuário que retweetou
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweetId String  @map("tweet_id") @db.Uuid //id do tweet pai
  tweet   Tweet   @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  comment String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@unique([tweetId, userId]) // não permitir duplicidade de retweet
  @@map("retweets")
}

enum TweetType {
  TWEET
  REPLY
}
